{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Simple TCP Client in Python": {
		"prefix": "client",
		"body": [
			"#!/usr/bin/env python3",
			"import socket",
			"import sys",
			"",
			"HOST = sys.argv[1]",
			"PORT = int(sys.argv[2])",
			"",
			"with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:",
			"    s.connect((HOST, PORT))",
			"    msg = input('Please enter the message: ')",
			"    s.sendall(msg.encode('utf-8'))",
			"    data = s.recv(1024)",
			"    s.close()",
			"",
			"print('Received: %s' % data.decode('utf-8'))"
		],
		"description": "Basic TCP client in Python using sockets"
	},
	"Simple TCP Server in Python": {
		"prefix": "server",
		"body": [
			"#!/usr/bin/env python3",
			"import socket",
			"import sys",
			"import time",
			"",
			"HOST = '127.0.0.1'  # Standard loopback interface address (localhost)",
			"PORT = int(sys.argv[1])  # Port to listen on",
			"",
			"with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:",
			"    s.bind((HOST, PORT))",
			"    s.listen()",
			"    conn, addr = s.accept()",
			"    # print('Connected by', addr)",
			"    data = conn.recv(1024)",
			"    print('Here is the message: %s' % data.decode('utf-8'))",
			"    conn.sendall('I got your message'.encode('utf-8'))",
			"    time.sleep(1)  # socket must be closed by client; wait to avoid TIME_WAIT"
		],
		"description": "Basic TCP server in Python using sockets"
	}
}