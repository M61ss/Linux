{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Server": {
		"prefix": "server",
		"body": [
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <unistd.h>",
			"#include <string.h>",
			"#include <sys/types.h>",
			"#include <sys/socket.h>",
			"#include <netinet/in.h>",
			"",
			"void error(const char *msg) { perror(msg); exit(EXIT_FAILURE); }",
			"",
			"int main(int argc, char *argv[]) {",
			"    if (argc < 2) error(\"Usage: server <port>\");",
			"    int port = atoi(argv[1]);",
			"    int sockfd, newsockfd;",
			"    struct sockaddr_in serv_addr, cli_addr;",
			"    socklen_t clilen = sizeof(cli_addr);",
			"",
			"    // Creazione socket",
			"    sockfd = socket(AF_INET, SOCK_STREAM, 0);",
			"    if (sockfd < 0) error(\"ERROR opening socket\");",
			"",
			"    // Init indirizzo server",
			"    memset(&serv_addr, 0, sizeof(serv_addr));",
			"    serv_addr.sin_family = AF_INET;",
			"    serv_addr.sin_addr.s_addr = INADDR_ANY;",
			"    serv_addr.sin_port = htons(port);",
			"",
			"    // Bind",
			"    if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)",
			"        error(\"ERROR on binding\");",
			"",
			"    // Listen",
			"    if (listen(sockfd, 5) < 0) error(\"ERROR on listen\");",
			"    printf(\"Server listening on port %d...\\n\", port);",
			"",
			"    // Accept",
			"    newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);",
			"    if (newsockfd < 0) error(\"ERROR on accept\");",
			"    printf(\"Client connesso\\n\");",
			"",
			"    // Comunicazione",
			"    char buffer[256];",
			"    memset(buffer, 0, 256);",
			"    ssize_t n = read(newsockfd, buffer, 255);",
			"    if (n < 0) error(\"ERROR reading from socket\");",
			"    printf(\"Messaggio ricevuto: %s\\n\", buffer);",
			"",
			"    // Risposta",
			"    const char *reply = \"Hello from server\";",
			"    n = write(newsockfd, reply, strlen(reply));",
			"    if (n < 0) error(\"ERROR writing to socket\");",
			"",
			"    close(newsockfd);",
			"    close(sockfd);",
			"    return 0;",
			"}"
		],
	},
	"Client": {
		"prefix": "client",
		"body": [
			"#include <stdio.h>",
			"#include <unistd.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <sys/types.h>",
			"#include <sys/socket.h>",
			"#include <netinet/in.h>",
			"#include <netdb.h>",
			"",
			"void error(const char *msg) { perror(msg); exit(EXIT_FAILURE); }",
			"",
			"int main(int argc, char *argv[]) {",
			"    if (argc < 3) error(\"Usage: client <host> <port>\");",
			"    const char *host = argv[1];",
			"    int port = atoi(argv[2]);",
			"    int sockfd;",
			"    struct sockaddr_in serv_addr;",
			"    struct hostent *server;",
			"",
			"    sockfd = socket(AF_INET, SOCK_STREAM, 0);",
			"    if (sockfd < 0) error(\"ERROR opening socket\");",
			"",
			"    server = gethostbyname(host);",
			"    if (server == NULL) error(\"ERROR, no such host\");",
			"",
			"    memset(&serv_addr, 0, sizeof(serv_addr));",
			"    serv_addr.sin_family = AF_INET;",
			"    memcpy(&serv_addr.sin_addr.s_addr, server->h_addr, server->h_length);",
			"    serv_addr.sin_port = htons(port);",
			"",
			"    if (connect(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)",
			"        error(\"Connection Failed\");",
			"    printf(\"Connesso al server\\n\");",
			"",
			"    const char *msg = \"Hello from client\";",
			"    ssize_t n = write(sockfd, msg, strlen(msg));",
			"    if (n < 0) error(\"ERROR writing to socket\");",
			"",
			"    char buffer[256];",
			"    memset(buffer, 0, 256);",
			"    n = read(sockfd, buffer, 255);",
			"    if (n < 0) error(\"ERROR reading from socket\");",
			"    printf(\"Risposta server: %s\\n\", buffer);",
			"",
			"    close(sockfd);",
			"    return 0;",
			"}"
		],
	}
}