{
	// Place your snippets for c here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Simple TCP Server in C": {
		"prefix": "server",
		"body": [
			"#include <netinet/in.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <strings.h>",
			"#include <sys/socket.h>",
			"#include <sys/types.h>",
			"#include <unistd.h>",
			"",
			"void error(char *msg) {",
			"  perror(msg);",
			"  exit(1);",
			"}",
			"",
			"int main(int argc, char *argv[]) {",
			"  int sockfd, newsockfd, portno, cli_len;",
			"  char buffer[256];",
			"  struct sockaddr_in serv_addr, cli_addr;",
			"  int n;",
			"",
			"  if (argc < 2) {",
			"    fprintf(stderr, \"ERROR, no port provided\\n\");",
			"    exit(1);",
			"  }",
			"",
			"  portno = atoi(argv[1]);",
			"  sockfd = socket(AF_INET, SOCK_STREAM, 0);",
			"  if (sockfd < 0)",
			"    error(\"ERROR opening socket\");",
			"",
			"  bzero((char *)&serv_addr, sizeof(serv_addr));",
			"  serv_addr.sin_family = AF_INET;",
			"  serv_addr.sin_addr.s_addr = INADDR_ANY;",
			"  serv_addr.sin_port = htons(portno);",
			"",
			"  if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)",
			"    error(\"ERROR on binding\");",
			"",
			"  listen(sockfd, 5);",
			"  cli_len = sizeof(cli_addr);",
			"",
			"  newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &cli_len);",
			"  if (newsockfd < 0)",
			"    error(\"ERROR on accept\");",
			"",
			"  bzero(buffer, 256);",
			"  n = read(newsockfd, buffer, 255);",
			"  if (n < 0)",
			"    error(\"ERROR reading from socket\");",
			"",
			"  printf(\"Here is the message: %s\\n\", buffer);",
			"  n = write(newsockfd, \"I got your message\", 18);",
			"  if (n < 0)",
			"    error(\"ERROR writing to socket\");",
			"",
			"  exit(0);",
			"}"
		],
		"description": "Basic TCP server in C using sockets"
	},
	"Simple TCP Server with fork in C": {
		"prefix": "server fork",
		"body": [
			"#include <netinet/in.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <strings.h>",
			"#include <sys/socket.h>",
			"#include <sys/types.h>",
			"#include <unistd.h>",
			"",
			"void error(char *msg) {",
			"  perror(msg);",
			"  exit(1);",
			"}",
			"",
			"int main(int argc, char *argv[]) {",
			"  int sockfd, newsockfd, portno, cli_len;",
			"  char buffer[256];",
			"  struct sockaddr_in serv_addr, cli_addr;",
			"  int n;",
			"",
			"  if (argc < 2) {",
			"    fprintf(stderr, \"ERROR, no port provided\\n\");",
			"    exit(1);",
			"  }",
			"",
			"  portno = atoi(argv[1]);",
			"  sockfd = socket(AF_INET, SOCK_STREAM, 0);",
			"  if (sockfd < 0)",
			"    error(\"ERROR opening socket\");",
			"",
			"  bzero((char *)&serv_addr, sizeof(serv_addr));",
			"  serv_addr.sin_family = AF_INET;",
			"  serv_addr.sin_addr.s_addr = INADDR_ANY;",
			"  serv_addr.sin_port = htons(portno);",
			"",
			"  if (bind(sockfd, (struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)",
			"    error(\"ERROR on binding\");",
			"",
			"  listen(sockfd, 5);",
			"  while (1) {",
			"    cli_len = sizeof(cli_addr);",
			"    newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &cli_len);",
			"    if (newsockfd < 0)",
			"      error(\"ERROR on accept\");",
			"",
			"    int pid = fork();",
			"    if (pid < 0) {",
			"      printf(\"WARNING fork failed\");",
			"    } else if (pid == 0) {",
			"      bzero(buffer, 256);",
			"      n = read(newsockfd, buffer, 255);",
			"      if (n < 0)",
			"        error(\"ERROR reading from socket\");",
			"",
			"      printf(\"Here is the message: %s\\n\", buffer);",
			"      n = write(newsockfd, \"I got your message\", 18);",
			"      if (n < 0)",
			"        error(\"ERROR writing to socket\");",
			"      ",
			"      exit(0);",
			"    }",
			"  }",
			"",
			"  exit(0);",
			"}"
		],
		"description": "Crea un semplice server TCP multiclient con fork()"
	},
	"Simple TCP Client in C": {
		"prefix": "client",
		"body": [
			"#include <netdb.h>",
			"#include <netinet/in.h>",
			"#include <stdio.h>",
			"#include <stdlib.h>",
			"#include <string.h>",
			"#include <strings.h>",
			"#include <sys/socket.h>",
			"#include <sys/types.h>",
			"#include <unistd.h>",
			"",
			"void error(char *msg) {",
			"  perror(msg);",
			"  exit(1);",
			"}",
			"",
			"int main(int argc, char *argv[]) {",
			"  int sockfd, portno, n;",
			"  struct sockaddr_in serv_addr;",
			"  struct hostent *server;",
			"  char buffer[256];",
			"",
			"  if (argc < 3) {",
			"    fprintf(stderr, \"usage %s: hostname port\\n\", argv[0]);",
			"    exit(1);",
			"  }",
			"",
			"  portno = atoi(argv[2]);",
			"  sockfd = socket(AF_INET, SOCK_STREAM, 0);",
			"  if (sockfd < 0)",
			"    error(\"ERROR opening socket\");",
			"",
			"  server = gethostbyname(argv[1]);",
			"  if (server == NULL) {",
			"    fprintf(stderr, \"ERROR, no such host\\n\");",
			"    exit(1);",
			"  }",
			"",
			"  bzero((char *)&serv_addr, sizeof(serv_addr));",
			"  serv_addr.sin_family = AF_INET;",
			"  bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr,",
			"        server->h_length);",
			"  serv_addr.sin_port = htons(portno);",
			"",
			"  if (connect(sockfd, (const struct sockaddr *)&serv_addr, sizeof(serv_addr)) < 0)",
			"    error(\"ERROR connecting\");",
			"",
			"  printf(\"Please enter the message: \");",
			"  bzero(buffer, 256);",
			"  fgets(buffer, 255, stdin);",
			"",
			"  n = write(sockfd, buffer, strlen(buffer));",
			"  if (n < 0)",
			"    error(\"ERROR writing to socket\");",
			"",
			"  bzero(buffer, 256);",
			"  n = read(sockfd, buffer, 256);",
			"  if (n < 0)",
			"    error(\"ERROR reading from socket\");",
			"",
			"  printf(\"%s\\n\", buffer);",
			"",
			"  exit(0);",
			"}"
		],
		"description": "Basic TCP client in C using sockets"
	}
}